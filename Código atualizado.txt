#include <WiFi.h>       // Biblioteca para conexão Wi-Fi 
#include <HTTPClient.h> // Biblioteca para fazer requisições HTTP 
#include <TinyGPS++.h>  // Biblioteca para comunicação com o GPS 

const char* ssid = "CIT_Alunos";         // Nome da rede Wi-Fi 
const char* password = "alunos@2024";      // Senha do Wi-Fi 
const char* server = "https://indecisive-bitter-sense.glitch.me/"; // URL do servidor

#define RXD2 16          // Pino RX do ESP32 conectado ao TX do GPS 
#define TXD2 17          // Pino TX do ESP32 conectado ao RX do GPS 
#define GPS_BAUD 9600    // Taxa de comunicação do GPS 
#define LED_PIN 18        // Pino do LED (ajuste conforme o hardware)
#define BUZZER_PIN 21    // Pino do buzzer

TinyGPSPlus gps;         // Instância do objeto GPS 
HardwareSerial gpsSerial(2); // Configuração da porta serial 2 para comunicação com o GPS

// Definição da localização predefinida e do limiar para acionar os dispositivos
const float targetLat = 2.836118;      // Latitude alvo
const float targetLon = -60.689867;    // Longitude alvo
const double thresholdDistance = 210; // Distância em metros para acionar LED e buzzer

void setup() {
  Serial.begin(115200);  // Inicia a comunicação serial para monitoramento
  gpsSerial.begin(GPS_BAUD, SERIAL_8N1, RXD2, TXD2); // Inicia a comunicação com o GPS
  Serial.println("Serial 2 do GPS iniciada");

  // Configura o pino do LED
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW); // Garante que o LED esteja apagado inicialmente

  // Configura o pino do buzzer
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW); // Garante que o buzzer esteja desligado inicialmente

  // Conexão com o Wi-Fi
  WiFi.begin(ssid, password); 
  Serial.print("Conectando ao Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) { 
    delay(500); 
    Serial.print(".");
  } 
  Serial.println("\nWiFi Conectado!"); 
}

void loop() {
  unsigned long start = millis(); // Marca o tempo inicial do loop
  bool newData = false;           // Variável para verificar se há novos dados do GPS
  
  // Lê dados do GPS por 1 segundo
  while (millis() - start < 1000) { 
    while (gpsSerial.available() > 0) { 
      if (gps.encode(gpsSerial.read())) { 
        newData = true; 
      } 
    } 
  }

  if (newData && gps.location.isValid()) { 
    float lat = gps.location.lat(); // Obtém a latitude 
    float lon = gps.location.lng(); // Obtém a longitude

    // Calcula a distância entre a localização atual e a localização predefinida
    double distance = TinyGPSPlus::distanceBetween(lat, lon, targetLat, targetLon);
    Serial.print("Distancia para a localizacao predefinida: ");
    Serial.print(distance);
    Serial.println(" metros");

    // Envio da localização para o servidor, se o Wi-Fi estiver conectado
    if (WiFi.status() == WL_CONNECTED) { 
      HTTPClient http; 
      String url = String(server) + "/update?lat=" + String(lat, 6) + "&lon=" + String(lon, 6); 
      http.begin(url); 
      int httpCode = http.GET(); 
      http.end();
      if (httpCode > 0) { 
        Serial.println("Localizacao enviada com sucesso!"); 
      } else { 
        Serial.println("Falha ao enviar a localizacao!"); 
      } 
    } else { 
      Serial.println("Wi-Fi desconectado, tentando reconectar..."); 
      WiFi.begin(ssid, password); 
    } 

    // Se a distância for menor ou igual ao limiar, aciona LED e buzzer
    if (distance <= thresholdDistance) {
      Serial.println("Localizacao atingida! Piscar LED e acionar buzzer.");
      // Pisca o LED e aciona o buzzer (exemplo: 3 piscadas/apitos)
      for (int i = 0; i < 3; i++) {
        digitalWrite(LED_PIN, HIGH);
        digitalWrite(BUZZER_PIN, HIGH);
        delay(200);
        digitalWrite(LED_PIN, LOW);
        digitalWrite(BUZZER_PIN, LOW);
        delay(200);
      }
    }
  } else { 
    Serial.println("Aguardando coordenadas validas do GPS..."); 
  }
  delay(1000); 
}
